<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Indicates whether T4 templates should be transformed automatically as part of the build. -->
    <TransformOnBuild Condition=" $(TransformOnBuild)=='' ">false</TransformOnBuild>

    <!-- Indicates whether only out of date templates should be transformed, or whether all
         templates should be transformed. -->
    <TransformOutOfDateOnly Condition=" $(TransformOutOfDateOnly)=='' ">true</TransformOutOfDateOnly>
  </PropertyGroup>

  <UsingTask TaskName="FilterItems" AssemblyFile="BuildTasks.TextTemplating.dll" />
  <UsingTask TaskName="TransformTemplates" AssemblyFile="BuildTasks.TextTemplating.dll" />

  <PropertyGroup>
    <!-- List of targets that should be run before the transforming.
    By default, no pre-processing is carried out.
    The next line is effectively a no-op: it is only here as placeholder to document this
    customisation point. -->
    <BeforeTransform Condition=" $(BeforeTransform) == '' "></BeforeTransform>

    <!-- List of targets that should be run after transforming.
    By default, a target is called that will issue warnings for all read-only files that
    were overwritten, and for all files that were not overwritten.
    You can override this behaviour by providing a custom target to handle post-processing
    e.g. in a source code control scenario, you could check out files that have been overwritten.
    -->
    <AfterTransform Condition=" $(AfterTransform) == '' "></AfterTransform>
  </PropertyGroup>


  <!--
  ================================================================
                         Transform
  ================================================================
  Description: Transforms the specified T4 templates.
    The $(TransformFile) property is used to specify the file or files
    to transform. It can contain wildcards.
  Examples:
    (1) transform file "foo.tt"
      msbuild myproj.proj /t:Transform /p:TransformFile=foo.tt

    (2) transform all .tt files start with "domain" under the folder "GeneratedCode", recursively
      msbuild dsl.csproj /t:Transform /p:TransformFile="GeneratedCode\**\domain*.tt"

  The actual work of the transformations is carried out by ExecuteTransformations. This target
  calls @(CreateCandidateT4ItemList) then @(SelectItemsForTransform) to detemine which files should
  be transformed/pre-processed.
  -->
  <Target Name="Transform" DependsOnTargets="CreateCandidateT4ItemList;SelectItemsForTransform;$(BeforeTransform);ExecuteTransformations;$(AfterTransform)">
  </Target>

  <!--
  ================================================================
                         SelectItemsForTransform
  ================================================================
  Description: Selects the items that will be passed as inputs to
    the CreateT4ItemLists target.
    The TransformFile property is used to select the file or files
    to transform. It can contain wildcards.
  -->
  <Target Name="SelectItemsForTransform" >
    <Error Condition="$(TransformFile)==''" Text="Specify the file to be transformed in the property 'TransformFile'" />

    <!-- Convert the property into an item. This is done so that any
         wildcards in the property are expanded.-->
    <ItemGroup>
      <ExpandedTransformFile Include="$(TransformFile)" />
    </ItemGroup>

    <!-- However, the TransformFileItem task items are newly-created, and they may or may not
    refer to files that are in the project. Also, the newly-created items will not have any
    custom metadata. We want to (1) limit this to files that are in the project and (2) get
    the corresponding task items from the project (since they may have custom metadata).
    -->
	<FilterItems
		Include="@(CandidateT4ItemList)"
		MetadataName="Identity"
		MetadataValue="@(ExpandedTransformFile)">
		<Output
			TaskParameter="Result"
			ItemName="CreateT4ItemListsInputs"/>
	</FilterItems>
  </Target>

  <!--
  ================================================================
                         TransformAll
  ================================================================
  Description: Transforms all T4 templates in the project

  The actual work of the transformations is carried out by ExecuteTransformations. This target
  calls @(CreateCandidateT4ItemList) then @(SelectItemsForTransformAll) to detemine which files should
  be transformed/pre-processed.
  -->
  <Target Name="TransformAll" DependsOnTargets="CreateCandidateT4ItemList;SelectItemsForTransformAll;$(BeforeTransform);ExecuteTransformations;$(AfterTransform)">
  </Target>

  <!--
  ================================================================
                         SelectItemsForTransformAll
  ================================================================
  Description: Selects the items that will be passed as inputs to
    the CreateT4ItemLists target. This target selects all of the
    items in the groups commonly generated with T4.
  -->
  <Target Name="SelectItemsForTransformAll" >
    <ItemGroup>
      <CreateT4ItemListsInputs Include="@(CandidateT4ItemList)"/>
    </ItemGroup>

    <!-- Create a list of all files (we need this to work out which file are generated and which
         files they depend on.
    <CreateItem Condition="@(CreateT4ItemListsInputs)==''" Include="@(CandidateT4ItemList)">
      <Output ItemName="CreateT4ItemListsInputs" TaskParameter="Include"/>
    </CreateItem>-->

  </Target>



  <!-- ################################################################################ -->
  <!-- Internal target(s) -->
  <!-- ################################################################################
       These targets would not normally be called directly from outside this file.
  -->

  <!--
  ================================================================
                         CreateCandidateT4ItemList
  ================================================================
  Description: creates an item list @(CandidateT4ItemList) that contains
  all of the items that should be considered when deciding which ones
  should be processed by T4.
  -->
  <Target Name="CreateCandidateT4ItemList" >
    <Message Importance="low" Text="Creating a list of candidate items that might need to be processed by T4 items" />

    <!-- Create a list of all files if only hasn't been created already (we need this to
          work out which file are generated and which files they depend on. -->
    <CreateItem Condition="@(CandidateT4ItemList)==''" Include="@(Compile);@(None);@(Content);@(EmbeddedResource)">
      <Output ItemName="CandidateT4ItemList" TaskParameter="Include"/>
    </CreateItem>
  </Target>


  <!--
  ================================================================
                         CreateT4ItemLists
  ================================================================
  Description: filters the items in @(CreateT4ItemListsInputs) to select those that
  have a T4 custom tool as the custom tool for the item. The matching items will
  be placed in either the $(T4TransformInputs) or $(T4PreprocessInputs) item groups,
  depending on the custom tool that is specified.

  The @(T4TransformInputs) group will contain the items that are use the T4 transform
  custom tool, together with any items that in in the @(T4Transform) group.

  Similarly, the @(T4TransformInputs) group will contain the items that are use the T4
  preprocess custom tool, together with any items that in in the @(T4Preprocess) group.

  The item groups, @(T4TranformInputs) and @(T4PreprocessInputs) will be passed to
  the transform and preprocess targets, respectively.

  -->
  <Target Name="CreateT4ItemLists" DependsOnTargets="CreateCandidateT4ItemList">
    <Message Importance="low" Text="Creating T4 items lists for project $(ProjectName) ($(ProjectPath))..." />

    <!-- Specify the names of the T4 custom tools if they haven't already been set elsewhere. -->
    <PropertyGroup>
      <T4TransformCustomToolName Condition=" $(T4TransformCustomToolName)=='' ">TextTemplatingFileGenerator</T4TransformCustomToolName>
      <T4PreprocessCustomToolName Condition=" $(T4PreprocessCustomToolName)=='' ">TextTemplatingFilePreprocessor</T4PreprocessCustomToolName>
    </PropertyGroup>

	<FilterItems
		Include="@(CreateT4ItemListsInputs)"
		MetadataName="Generator"
		MetadataValue="$(T4TransformCustomToolName)">
		<Output
			TaskParameter="Result"
			ItemName="T4TransformInputs"/>
	</FilterItems>
	<FilterItems
		Include="@(CreateT4ItemListsInputs)"
		MetadataName="Generator"
		MetadataValue="$(T4PreprocessCustomToolName)">
		<Output
			TaskParameter="Result"
			ItemName="T4Preprocess"/>
	</FilterItems>

  </Target>


  <!--
  ================================================================
                         ExecuteTransformations
  ================================================================
  Description: Transforms the T4 templates in the item groups T4TransformInputs and
    T4PreProcessInputs. The item groups are created by the target "CreateT4ItemLists".
    Includes both transformation and preprocess templates.
  -->
  <Target Name="ExecuteTransformations" DependsOnTargets="CreateT4ItemLists">
    <ItemGroup>
      <T4TransformOutputs Include="%(T4TransformInputs.RelativeDir)%(T4TransformInputs.LastGenOutput)"/>
    </ItemGroup>

    <TransformTemplates
      TemplatesToProcess="@(T4TransformInputs)"
      OutputFiles="@(T4TransformOutputs)"
      MinimalRebuildFromTracking="$(TransformOutOfDateOnly)"
      T4ParameterValues="@(T4ParameterValues)">
      <Output ItemName="GeneratedFiles" TaskParameter="GeneratedFiles"/>
    </TransformTemplates>
  </Target>

  <!-- ################################################################################ -->
  <!-- Integration into the normal build process -->
  <!-- ################################################################################ -->

  <PropertyGroup>
    <!-- Insert the transform task into the normal project build sequence -->
    <BuildDependsOn>TransformDuringBuild;$(BuildDependsOn)</BuildDependsOn>
  </PropertyGroup>

  <!--
  ================================================================
                         TransformDuringBuild
  ================================================================
  Description: if TransformOnBuild is true, this target will be executed as part of the normal
  build process, and will transform all of the templates in the project.
  -->
  <Target Name="TransformDuringBuild" DependsOnTargets="TransformAll" Condition="$(TransformOnBuild)"/>


</Project>
